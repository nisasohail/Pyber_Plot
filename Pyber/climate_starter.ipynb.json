{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "from matplotlib import style\n",
    "style.use('fivethirtyeight')\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Reflect Tables into SQLAlchemy ORM"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Python SQL toolkit and Object Relational Mapper\n",
    "import sqlalchemy\n",
    "from sqlalchemy.ext.automap import automap_base\n",
    "from sqlalchemy.orm import Session\n",
    "from sqlalchemy import create_engine, func"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "engine = create_engine(\"sqlite:///Resources/hawaii.sqlite\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# reflect an existing database into a new model\n",
    "Base = automap_base()\n",
    "# reflect the tables\n",
    "Base.prepare(engine, reflect=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['measurement', 'station']"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# We can view all of the classes that automap found\n",
    "Base.classes.keys()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Save references to each table\n",
    "Measurement = Base.classes.measurement\n",
    "Station = Base.classes.station"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create our session (link) from Python to the DB\n",
    "session = Session(engine)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Exploratory Climate Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(0.0, '2016-08-23'),\n",
       " (0.15, '2016-08-23'),\n",
       " (0.05, '2016-08-23'),\n",
       " (None, '2016-08-23'),\n",
       " (0.02, '2016-08-23'),\n",
       " (1.79, '2016-08-23'),\n",
       " (0.7, '2016-08-23'),\n",
       " (0.08, '2016-08-24'),\n",
       " (2.15, '2016-08-24'),\n",
       " (2.28, '2016-08-24'),\n",
       " (None, '2016-08-24'),\n",
       " (1.22, '2016-08-24'),\n",
       " (2.15, '2016-08-24'),\n",
       " (1.45, '2016-08-24'),\n",
       " (0.08, '2016-08-25'),\n",
       " (0.08, '2016-08-25'),\n",
       " (0.0, '2016-08-25'),\n",
       " (0.0, '2016-08-25'),\n",
       " (0.21, '2016-08-25'),\n",
       " (0.06, '2016-08-25'),\n",
       " (0.11, '2016-08-25'),\n",
       " (0.0, '2016-08-26'),\n",
       " (0.03, '2016-08-26'),\n",
       " (0.02, '2016-08-26'),\n",
       " (0.04, '2016-08-26'),\n",
       " (0.0, '2016-08-26'),\n",
       " (0.01, '2016-08-26'),\n",
       " (0.0, '2016-08-27'),\n",
       " (0.18, '2016-08-27'),\n",
       " (0.02, '2016-08-27'),\n",
       " (0.0, '2016-08-27'),\n",
       " (0.12, '2016-08-27'),\n",
       " (None, '2016-08-27'),\n",
       " (0.01, '2016-08-28'),\n",
       " (0.14, '2016-08-28'),\n",
       " (0.14, '2016-08-28'),\n",
       " (0.14, '2016-08-28'),\n",
       " (0.6, '2016-08-28'),\n",
       " (2.07, '2016-08-28'),\n",
       " (0.0, '2016-08-29'),\n",
       " (0.17, '2016-08-29'),\n",
       " (0.04, '2016-08-29'),\n",
       " (None, '2016-08-29'),\n",
       " (0.0, '2016-08-29'),\n",
       " (0.35, '2016-08-29'),\n",
       " (0.9, '2016-08-29'),\n",
       " (0.0, '2016-08-30'),\n",
       " (0.0, '2016-08-30'),\n",
       " (0.02, '2016-08-30'),\n",
       " (0.0, '2016-08-30'),\n",
       " (0.0, '2016-08-30'),\n",
       " (0.05, '2016-08-30'),\n",
       " (0.13, '2016-08-31'),\n",
       " (0.1, '2016-08-31'),\n",
       " (None, '2016-08-31'),\n",
       " (None, '2016-08-31'),\n",
       " (0.25, '2016-08-31'),\n",
       " (0.24, '2016-08-31'),\n",
       " (2.46, '2016-08-31'),\n",
       " (0.0, '2016-09-01'),\n",
       " (0.0, '2016-09-01'),\n",
       " (0.0, '2016-09-01'),\n",
       " (None, '2016-09-01'),\n",
       " (0.02, '2016-09-01'),\n",
       " (0.01, '2016-09-01'),\n",
       " (0.0, '2016-09-02'),\n",
       " (0.02, '2016-09-02'),\n",
       " (0.19, '2016-09-02'),\n",
       " (None, '2016-09-02'),\n",
       " (None, '2016-09-02'),\n",
       " (0.01, '2016-09-02'),\n",
       " (0.03, '2016-09-02'),\n",
       " (0.0, '2016-09-03'),\n",
       " (0.07, '2016-09-03'),\n",
       " (0.08, '2016-09-03'),\n",
       " (0.12, '2016-09-03'),\n",
       " (1.0, '2016-09-03'),\n",
       " (0.03, '2016-09-04'),\n",
       " (0.03, '2016-09-04'),\n",
       " (0.74, '2016-09-04'),\n",
       " (0.14, '2016-09-04'),\n",
       " (0.44, '2016-09-04'),\n",
       " (None, '2016-09-05'),\n",
       " (0.11, '2016-09-05'),\n",
       " (None, '2016-09-05'),\n",
       " (0.02, '2016-09-05'),\n",
       " (0.03, '2016-09-05'),\n",
       " (0.18, '2016-09-05'),\n",
       " (None, '2016-09-06'),\n",
       " (0.05, '2016-09-06'),\n",
       " (0.04, '2016-09-06'),\n",
       " (0.03, '2016-09-06'),\n",
       " (0.11, '2016-09-06'),\n",
       " (1.0, '2016-09-06'),\n",
       " (0.05, '2016-09-07'),\n",
       " (0.1, '2016-09-07'),\n",
       " (0.23, '2016-09-07'),\n",
       " (0.11, '2016-09-07'),\n",
       " (0.16, '2016-09-07'),\n",
       " (1.35, '2016-09-07'),\n",
       " (0.0, '2016-09-08'),\n",
       " (0.22, '2016-09-08'),\n",
       " (0.01, '2016-09-08'),\n",
       " (None, '2016-09-08'),\n",
       " (0.01, '2016-09-08'),\n",
       " (0.07, '2016-09-08'),\n",
       " (0.15, '2016-09-08'),\n",
       " (0.03, '2016-09-09'),\n",
       " (0.01, '2016-09-09'),\n",
       " (0.29, '2016-09-09'),\n",
       " (None, '2016-09-09'),\n",
       " (0.23, '2016-09-09'),\n",
       " (0.16, '2016-09-09'),\n",
       " (0.35, '2016-09-09'),\n",
       " (0.0, '2016-09-10'),\n",
       " (0.01, '2016-09-10'),\n",
       " (0.14, '2016-09-10'),\n",
       " (0.09, '2016-09-10'),\n",
       " (1.16, '2016-09-10'),\n",
       " (0.05, '2016-09-11'),\n",
       " (0.18, '2016-09-11'),\n",
       " (0.12, '2016-09-11'),\n",
       " (0.3, '2016-09-11'),\n",
       " (0.6, '2016-09-11'),\n",
       " (0.0, '2016-09-12'),\n",
       " (0.04, '2016-09-12'),\n",
       " (None, '2016-09-12'),\n",
       " (None, '2016-09-12'),\n",
       " (0.15, '2016-09-12'),\n",
       " (0.31, '2016-09-12'),\n",
       " (1.04, '2016-09-12'),\n",
       " (0.02, '2016-09-13'),\n",
       " (0.37, '2016-09-13'),\n",
       " (0.32, '2016-09-13'),\n",
       " (None, '2016-09-13'),\n",
       " (0.46, '2016-09-13'),\n",
       " (0.34, '2016-09-13'),\n",
       " (1.2, '2016-09-13'),\n",
       " (1.32, '2016-09-14'),\n",
       " (0.9, '2016-09-14'),\n",
       " (1.84, '2016-09-14'),\n",
       " (None, '2016-09-14'),\n",
       " (1.19, '2016-09-14'),\n",
       " (2.33, '2016-09-14'),\n",
       " (6.7, '2016-09-14'),\n",
       " (0.42, '2016-09-15'),\n",
       " (0.12, '2016-09-15'),\n",
       " (0.07, '2016-09-15'),\n",
       " (None, '2016-09-15'),\n",
       " (0.17, '2016-09-15'),\n",
       " (0.83, '2016-09-15'),\n",
       " (3.35, '2016-09-15'),\n",
       " (0.06, '2016-09-16'),\n",
       " (0.01, '2016-09-16'),\n",
       " (0.07, '2016-09-16'),\n",
       " (0.0, '2016-09-16'),\n",
       " (0.01, '2016-09-16'),\n",
       " (0.06, '2016-09-16'),\n",
       " (0.61, '2016-09-16'),\n",
       " (0.05, '2016-09-17'),\n",
       " (0.04, '2016-09-17'),\n",
       " (0.0, '2016-09-17'),\n",
       " (0.36, '2016-09-17'),\n",
       " (0.23, '2016-09-17'),\n",
       " (0.0, '2016-09-18'),\n",
       " (0.0, '2016-09-18'),\n",
       " (0.04, '2016-09-18'),\n",
       " (0.07, '2016-09-18'),\n",
       " (0.42, '2016-09-18'),\n",
       " (0.0, '2016-09-19'),\n",
       " (0.01, '2016-09-19'),\n",
       " (None, '2016-09-19'),\n",
       " (None, '2016-09-19'),\n",
       " (0.05, '2016-09-19'),\n",
       " (0.01, '2016-09-19'),\n",
       " (0.25, '2016-09-19'),\n",
       " (0.0, '2016-09-20'),\n",
       " (0.09, '2016-09-20'),\n",
       " (0.25, '2016-09-20'),\n",
       " (0.0, '2016-09-20'),\n",
       " (0.04, '2016-09-20'),\n",
       " (0.22, '2016-09-20'),\n",
       " (0.43, '2016-09-20'),\n",
       " (0.0, '2016-09-21'),\n",
       " (0.06, '2016-09-21'),\n",
       " (0.02, '2016-09-21'),\n",
       " (0.0, '2016-09-21'),\n",
       " (0.07, '2016-09-21'),\n",
       " (1.02, '2016-09-21'),\n",
       " (0.02, '2016-09-22'),\n",
       " (0.09, '2016-09-22'),\n",
       " (0.17, '2016-09-22'),\n",
       " (0.06, '2016-09-22'),\n",
       " (0.01, '2016-09-22'),\n",
       " (0.34, '2016-09-22'),\n",
       " (0.75, '2016-09-22'),\n",
       " (0.0, '2016-09-23'),\n",
       " (0.15, '2016-09-23'),\n",
       " (0.15, '2016-09-23'),\n",
       " (0.0, '2016-09-23'),\n",
       " (0.0, '2016-09-23'),\n",
       " (0.94, '2016-09-23'),\n",
       " (0.33, '2016-09-23'),\n",
       " (0.0, '2016-09-24'),\n",
       " (0.0, '2016-09-24'),\n",
       " (0.0, '2016-09-24'),\n",
       " (0.0, '2016-09-24'),\n",
       " (0.01, '2016-09-24'),\n",
       " (0.27, '2016-09-24'),\n",
       " (0.0, '2016-09-25'),\n",
       " (0.02, '2016-09-25'),\n",
       " (0.0, '2016-09-25'),\n",
       " (0.0, '2016-09-25'),\n",
       " (0.03, '2016-09-25'),\n",
       " (0.04, '2016-09-25'),\n",
       " (0.06, '2016-09-26'),\n",
       " (0.06, '2016-09-26'),\n",
       " (0.02, '2016-09-26'),\n",
       " (None, '2016-09-26'),\n",
       " (0.34, '2016-09-26'),\n",
       " (0.17, '2016-09-26'),\n",
       " (1.02, '2016-09-26'),\n",
       " (0.02, '2016-09-27'),\n",
       " (0.12, '2016-09-27'),\n",
       " (0.0, '2016-09-27'),\n",
       " (0.05, '2016-09-27'),\n",
       " (0.17, '2016-09-27'),\n",
       " (1.0, '2016-09-27'),\n",
       " (0.0, '2016-09-28'),\n",
       " (0.08, '2016-09-28'),\n",
       " (0.0, '2016-09-28'),\n",
       " (0.0, '2016-09-28'),\n",
       " (0.0, '2016-09-28'),\n",
       " (0.0, '2016-09-28'),\n",
       " (0.05, '2016-09-28'),\n",
       " (0.0, '2016-09-29'),\n",
       " (0.49, '2016-09-29'),\n",
       " (0.2, '2016-09-29'),\n",
       " (0.04, '2016-09-29'),\n",
       " (0.18, '2016-09-29'),\n",
       " (0.59, '2016-09-29'),\n",
       " (1.49, '2016-09-29'),\n",
       " (0.0, '2016-09-30'),\n",
       " (0.31, '2016-09-30'),\n",
       " (0.06, '2016-09-30'),\n",
       " (None, '2016-09-30'),\n",
       " (0.15, '2016-09-30'),\n",
       " (0.25, '2016-09-30'),\n",
       " (0.38, '2016-09-30'),\n",
       " (0.0, '2016-10-01'),\n",
       " (0.14, '2016-10-01'),\n",
       " (0.08, '2016-10-01'),\n",
       " (0.07, '2016-10-01'),\n",
       " (0.14, '2016-10-01'),\n",
       " (1.02, '2016-10-01'),\n",
       " (0.0, '2016-10-02'),\n",
       " (0.02, '2016-10-02'),\n",
       " (0.03, '2016-10-02'),\n",
       " (0.0, '2016-10-02'),\n",
       " (0.06, '2016-10-02'),\n",
       " (0.61, '2016-10-02'),\n",
       " (0.0, '2016-10-03'),\n",
       " (0.04, '2016-10-03'),\n",
       " (0.03, '2016-10-03'),\n",
       " (None, '2016-10-03'),\n",
       " (0.0, '2016-10-03'),\n",
       " (0.16, '2016-10-03'),\n",
       " (0.46, '2016-10-03'),\n",
       " (0.0, '2016-10-04'),\n",
       " (0.0, '2016-10-04'),\n",
       " (0.0, '2016-10-04'),\n",
       " (None, '2016-10-04'),\n",
       " (0.0, '2016-10-04'),\n",
       " (0.03, '2016-10-04'),\n",
       " (3.46, '2016-10-04'),\n",
       " (0.0, '2016-10-05'),\n",
       " (0.0, '2016-10-05'),\n",
       " (0.0, '2016-10-05'),\n",
       " (None, '2016-10-05'),\n",
       " (0.0, '2016-10-05'),\n",
       " (0.01, '2016-10-05'),\n",
       " (0.81, '2016-10-05'),\n",
       " (0.0, '2016-10-06'),\n",
       " (0.05, '2016-10-06'),\n",
       " (0.0, '2016-10-06'),\n",
       " (0.07, '2016-10-06'),\n",
       " (0.0, '2016-10-06'),\n",
       " (0.0, '2016-10-06'),\n",
       " (0.04, '2016-10-06'),\n",
       " (0.0, '2016-10-07'),\n",
       " (0.0, '2016-10-07'),\n",
       " (0.0, '2016-10-07'),\n",
       " (None, '2016-10-07'),\n",
       " (0.0, '2016-10-07'),\n",
       " (0.0, '2016-10-07'),\n",
       " (0.01, '2016-10-07'),\n",
       " (0.0, '2016-10-08'),\n",
       " (0.0, '2016-10-08'),\n",
       " (0.0, '2016-10-08'),\n",
       " (0.0, '2016-10-08'),\n",
       " (0.04, '2016-10-08'),\n",
       " (0.0, '2016-10-09'),\n",
       " (0.0, '2016-10-09'),\n",
       " (0.0, '2016-10-09'),\n",
       " (0.0, '2016-10-09'),\n",
       " (0.0, '2016-10-09'),\n",
       " (0.0, '2016-10-10'),\n",
       " (0.0, '2016-10-10'),\n",
       " (None, '2016-10-10'),\n",
       " (0.0, '2016-10-10'),\n",
       " (0.0, '2016-10-10'),\n",
       " (0.0, '2016-10-10'),\n",
       " (0.0, '2016-10-11'),\n",
       " (0.02, '2016-10-11'),\n",
       " (0.04, '2016-10-11'),\n",
       " (None, '2016-10-11'),\n",
       " (0.0, '2016-10-11'),\n",
       " (0.28, '2016-10-11'),\n",
       " (0.35, '2016-10-11'),\n",
       " (0.0, '2016-10-12'),\n",
       " (0.03, '2016-10-12'),\n",
       " (0.0, '2016-10-12'),\n",
       " (0.0, '2016-10-12'),\n",
       " (0.03, '2016-10-12'),\n",
       " (0.02, '2016-10-12'),\n",
       " (0.0, '2016-10-13'),\n",
       " (0.0, '2016-10-13'),\n",
       " (0.02, '2016-10-13'),\n",
       " (None, '2016-10-13'),\n",
       " (0.0, '2016-10-13'),\n",
       " (0.0, '2016-10-13'),\n",
       " (0.06, '2016-10-13'),\n",
       " (0.0, '2016-10-14'),\n",
       " (0.0, '2016-10-14'),\n",
       " (0.0, '2016-10-14'),\n",
       " (0.0, '2016-10-14'),\n",
       " (0.0, '2016-10-14'),\n",
       " (0.0, '2016-10-14'),\n",
       " (0.0, '2016-10-15'),\n",
       " (0.0, '2016-10-15'),\n",
       " (0.02, '2016-10-15'),\n",
       " (0.0, '2016-10-15'),\n",
       " (0.04, '2016-10-15'),\n",
       " (0.33, '2016-10-15'),\n",
       " (0.0, '2016-10-16'),\n",
       " (0.0, '2016-10-16'),\n",
       " (0.0, '2016-10-16'),\n",
       " (0.0, '2016-10-16'),\n",
       " (0.0, '2016-10-16'),\n",
       " (0.01, '2016-10-17'),\n",
       " (0.03, '2016-10-17'),\n",
       " (None, '2016-10-17'),\n",
       " (None, '2016-10-17'),\n",
       " (0.12, '2016-10-17'),\n",
       " (0.01, '2016-10-17'),\n",
       " (0.38, '2016-10-17'),\n",
       " (0.0, '2016-10-18'),\n",
       " (0.05, '2016-10-18'),\n",
       " (0.03, '2016-10-18'),\n",
       " (None, '2016-10-18'),\n",
       " (0.02, '2016-10-18'),\n",
       " (0.02, '2016-10-18'),\n",
       " (0.48, '2016-10-18'),\n",
       " (0.0, '2016-10-19'),\n",
       " (0.06, '2016-10-19'),\n",
       " (0.0, '2016-10-19'),\n",
       " (None, '2016-10-19'),\n",
       " (0.0, '2016-10-19'),\n",
       " (0.11, '2016-10-19'),\n",
       " (0.0, '2016-10-19'),\n",
       " (0.0, '2016-10-20'),\n",
       " (0.0, '2016-10-20'),\n",
       " (0.01, '2016-10-20'),\n",
       " (None, '2016-10-20'),\n",
       " (0.0, '2016-10-20'),\n",
       " (1.0, '2016-10-20'),\n",
       " (0.05, '2016-10-21'),\n",
       " (0.15, '2016-10-21'),\n",
       " (0.03, '2016-10-21'),\n",
       " (None, '2016-10-21'),\n",
       " (None, '2016-10-21'),\n",
       " (0.0, '2016-10-21'),\n",
       " (0.09, '2016-10-21'),\n",
       " (0.15, '2016-10-22'),\n",
       " (0.1, '2016-10-22'),\n",
       " (0.0, '2016-10-22'),\n",
       " (0.15, '2016-10-22'),\n",
       " (1.37, '2016-10-22'),\n",
       " (0.01, '2016-10-23'),\n",
       " (0.01, '2016-10-23'),\n",
       " (None, '2016-10-23'),\n",
       " (0.0, '2016-10-23'),\n",
       " (0.02, '2016-10-23'),\n",
       " (0.24, '2016-10-23'),\n",
       " (0.0, '2016-10-24'),\n",
       " (0.0, '2016-10-24'),\n",
       " (0.01, '2016-10-24'),\n",
       " (None, '2016-10-24'),\n",
       " (0.0, '2016-10-24'),\n",
       " (0.08, '2016-10-24'),\n",
       " (0.7, '2016-10-24'),\n",
       " (0.03, '2016-10-25'),\n",
       " (0.04, '2016-10-25'),\n",
       " (0.0, '2016-10-25'),\n",
       " (0.4, '2016-10-25'),\n",
       " (0.12, '2016-10-25'),\n",
       " (0.11, '2016-10-25'),\n",
       " (0.4, '2016-10-25'),\n",
       " (0.0, '2016-10-26'),\n",
       " (0.06, '2016-10-26'),\n",
       " (0.2, '2016-10-26'),\n",
       " (0.02, '2016-10-26'),\n",
       " (0.01, '2016-10-26'),\n",
       " (0.0, '2016-10-26'),\n",
       " (0.0, '2016-10-27'),\n",
       " (0.11, '2016-10-27'),\n",
       " (0.2, '2016-10-27'),\n",
       " (None, '2016-10-27'),\n",
       " (0.08, '2016-10-27'),\n",
       " (0.22, '2016-10-27'),\n",
       " (1.25, '2016-10-27'),\n",
       " (0.0, '2016-10-28'),\n",
       " (0.02, '2016-10-28'),\n",
       " (0.07, '2016-10-28'),\n",
       " (None, '2016-10-28'),\n",
       " (0.06, '2016-10-28'),\n",
       " (0.05, '2016-10-28'),\n",
       " (0.37, '2016-10-28'),\n",
       " (0.0, '2016-10-29'),\n",
       " (0.02, '2016-10-29'),\n",
       " (0.26, '2016-10-29'),\n",
       " (0.01, '2016-10-29'),\n",
       " (0.1, '2016-10-29'),\n",
       " (0.25, '2016-10-29'),\n",
       " (0.24, '2016-10-30'),\n",
       " (0.1, '2016-10-30'),\n",
       " (0.14, '2016-10-30'),\n",
       " (0.0, '2016-10-30'),\n",
       " (0.16, '2016-10-30'),\n",
       " (0.95, '2016-10-30'),\n",
       " (0.03, '2016-10-31'),\n",
       " (0.03, '2016-10-31'),\n",
       " (0.0, '2016-10-31'),\n",
       " (None, '2016-10-31'),\n",
       " (0.13, '2016-10-31'),\n",
       " (0.07, '2016-10-31'),\n",
       " (1.35, '2016-10-31'),\n",
       " (0.0, '2016-11-01'),\n",
       " (0.01, '2016-11-01'),\n",
       " (0.0, '2016-11-01'),\n",
       " (0.01, '2016-11-01'),\n",
       " (0.1, '2016-11-01'),\n",
       " (0.09, '2016-11-01'),\n",
       " (0.0, '2016-11-02'),\n",
       " (0.0, '2016-11-02'),\n",
       " (0.0, '2016-11-02'),\n",
       " (0.0, '2016-11-02'),\n",
       " (0.0, '2016-11-02'),\n",
       " (0.04, '2016-11-02'),\n",
       " (0.0, '2016-11-03'),\n",
       " (0.0, '2016-11-03'),\n",
       " (0.0, '2016-11-03'),\n",
       " (0.0, '2016-11-03'),\n",
       " (0.0, '2016-11-03'),\n",
       " (0.02, '2016-11-03'),\n",
       " (0.0, '2016-11-04'),\n",
       " (0.0, '2016-11-04'),\n",
       " (0.0, '2016-11-04'),\n",
       " (None, '2016-11-04'),\n",
       " (0.0, '2016-11-04'),\n",
       " (0.0, '2016-11-04'),\n",
       " (0.06, '2016-11-04'),\n",
       " (0.0, '2016-11-05'),\n",
       " (0.02, '2016-11-05'),\n",
       " (0.0, '2016-11-05'),\n",
       " (0.02, '2016-11-05'),\n",
       " (0.03, '2016-11-05'),\n",
       " (0.38, '2016-11-05'),\n",
       " (0.0, '2016-11-06'),\n",
       " (0.02, '2016-11-06'),\n",
       " (0.0, '2016-11-06'),\n",
       " (0.0, '2016-11-06'),\n",
       " (0.01, '2016-11-06'),\n",
       " (0.05, '2016-11-06'),\n",
       " (0.0, '2016-11-07'),\n",
       " (0.0, '2016-11-07'),\n",
       " (0.13, '2016-11-07'),\n",
       " (None, '2016-11-07'),\n",
       " (0.0, '2016-11-07'),\n",
       " (0.0, '2016-11-07'),\n",
       " (0.05, '2016-11-07'),\n",
       " (0.07, '2016-11-08'),\n",
       " (0.14, '2016-11-08'),\n",
       " (0.02, '2016-11-08'),\n",
       " (0.15, '2016-11-08'),\n",
       " (0.21, '2016-11-08'),\n",
       " (0.53, '2016-11-08'),\n",
       " (0.0, '2016-11-09'),\n",
       " (0.08, '2016-11-09'),\n",
       " (0.17, '2016-11-09'),\n",
       " (0.0, '2016-11-09'),\n",
       " (0.0, '2016-11-09'),\n",
       " (0.11, '2016-11-09'),\n",
       " (0.04, '2016-11-09'),\n",
       " (0.0, '2016-11-10'),\n",
       " (0.0, '2016-11-10'),\n",
       " (0.0, '2016-11-10'),\n",
       " (0.0, '2016-11-10'),\n",
       " (0.0, '2016-11-10'),\n",
       " (0.01, '2016-11-10'),\n",
       " (0.0, '2016-11-11'),\n",
       " (0.0, '2016-11-11'),\n",
       " (0.0, '2016-11-11'),\n",
       " (0.0, '2016-11-11'),\n",
       " (0.0, '2016-11-11'),\n",
       " (0.0, '2016-11-11'),\n",
       " (0.0, '2016-11-12'),\n",
       " (0.0, '2016-11-12'),\n",
       " (0.0, '2016-11-12'),\n",
       " (0.0, '2016-11-12'),\n",
       " (0.0, '2016-11-12'),\n",
       " (0.0, '2016-11-12'),\n",
       " (0.0, '2016-11-13'),\n",
       " (0.0, '2016-11-13'),\n",
       " (0.0, '2016-11-13'),\n",
       " (0.0, '2016-11-13'),\n",
       " (0.0, '2016-11-13'),\n",
       " (0.0, '2016-11-13'),\n",
       " (0.0, '2016-11-14'),\n",
       " (0.06, '2016-11-14'),\n",
       " (0.05, '2016-11-14'),\n",
       " (0.02, '2016-11-14'),\n",
       " (0.0, '2016-11-14'),\n",
       " (0.0, '2016-11-14'),\n",
       " (0.02, '2016-11-14'),\n",
       " (0.0, '2016-11-15'),\n",
       " (0.0, '2016-11-15'),\n",
       " (0.0, '2016-11-15'),\n",
       " (None, '2016-11-15'),\n",
       " (0.0, '2016-11-15'),\n",
       " (0.0, '2016-11-15'),\n",
       " (0.05, '2016-11-15'),\n",
       " (0.0, '2016-11-16'),\n",
       " (0.14, '2016-11-16'),\n",
       " (0.18, '2016-11-16'),\n",
       " (None, '2016-11-16'),\n",
       " (0.07, '2016-11-16'),\n",
       " (0.24, '2016-11-16'),\n",
       " (0.91, '2016-11-16'),\n",
       " (0.0, '2016-11-17'),\n",
       " (0.03, '2016-11-17'),\n",
       " (0.0, '2016-11-17'),\n",
       " (None, '2016-11-17'),\n",
       " (0.0, '2016-11-17'),\n",
       " (0.01, '2016-11-17'),\n",
       " (0.02, '2016-11-17'),\n",
       " (0.0, '2016-11-18'),\n",
       " (0.01, '2016-11-18'),\n",
       " (None, '2016-11-18'),\n",
       " (0.02, '2016-11-18'),\n",
       " (0.0, '2016-11-18'),\n",
       " (0.03, '2016-11-19'),\n",
       " (0.11, '2016-11-19'),\n",
       " (0.13, '2016-11-19'),\n",
       " (0.11, '2016-11-19'),\n",
       " (0.05, '2016-11-20'),\n",
       " (0.11, '2016-11-20'),\n",
       " (0.4, '2016-11-20'),\n",
       " (0.39, '2016-11-20'),\n",
       " (None, '2016-11-20'),\n",
       " (0.01, '2016-11-21'),\n",
       " (0.02, '2016-11-21'),\n",
       " (None, '2016-11-21'),\n",
       " (0.07, '2016-11-21'),\n",
       " (0.11, '2016-11-21'),\n",
       " (2.87, '2016-11-21'),\n",
       " (0.13, '2016-11-22'),\n",
       " (0.41, '2016-11-22'),\n",
       " (None, '2016-11-22'),\n",
       " (None, '2016-11-22'),\n",
       " (0.31, '2016-11-22'),\n",
       " (2.05, '2016-11-22'),\n",
       " (2.11, '2016-11-22'),\n",
       " (0.14, '2016-11-23'),\n",
       " (0.03, '2016-11-23'),\n",
       " (None, '2016-11-23'),\n",
       " (0.03, '2016-11-23'),\n",
       " (0.25, '2016-11-23'),\n",
       " (0.22, '2016-11-23'),\n",
       " (0.05, '2016-11-24'),\n",
       " (0.2, '2016-11-24'),\n",
       " (0.21, '2016-11-24'),\n",
       " (0.3, '2016-11-24'),\n",
       " (0.72, '2016-11-24'),\n",
       " (0.05, '2016-11-25'),\n",
       " (0.05, '2016-11-25'),\n",
       " (None, '2016-11-25'),\n",
       " (0.11, '2016-11-25'),\n",
       " (0.08, '2016-11-25'),\n",
       " (1.03, '2016-11-25'),\n",
       " (0.05, '2016-11-26'),\n",
       " (0.05, '2016-11-26'),\n",
       " (0.02, '2016-11-26'),\n",
       " (0.03, '2016-11-26'),\n",
       " (0.06, '2016-11-26'),\n",
       " (0.3, '2016-11-26'),\n",
       " (0.0, '2016-11-27'),\n",
       " (0.06, '2016-11-27'),\n",
       " (0.03, '2016-11-27'),\n",
       " (0.0, '2016-11-27'),\n",
       " (0.17, '2016-11-27'),\n",
       " (0.29, '2016-11-27'),\n",
       " (0.01, '2016-11-28'),\n",
       " (0.02, '2016-11-28'),\n",
       " (0.0, '2016-11-28'),\n",
       " (None, '2016-11-28'),\n",
       " (0.0, '2016-11-28'),\n",
       " (0.0, '2016-11-28'),\n",
       " (0.69, '2016-11-28'),\n",
       " (0.0, '2016-11-29'),\n",
       " (0.04, '2016-11-29'),\n",
       " (0.04, '2016-11-29'),\n",
       " (None, '2016-11-29'),\n",
       " (0.06, '2016-11-29'),\n",
       " (0.09, '2016-11-29'),\n",
       " (0.2, '2016-11-29'),\n",
       " (0.14, '2016-11-30'),\n",
       " (0.05, '2016-11-30'),\n",
       " (0.03, '2016-11-30'),\n",
       " (None, '2016-11-30'),\n",
       " (0.0, '2016-11-30'),\n",
       " (0.05, '2016-11-30'),\n",
       " (0.79, '2016-11-30'),\n",
       " (0.12, '2016-12-01'),\n",
       " (0.33, '2016-12-01'),\n",
       " (0.07, '2016-12-01'),\n",
       " (None, '2016-12-01'),\n",
       " (0.16, '2016-12-01'),\n",
       " (0.37, '2016-12-01'),\n",
       " (0.72, '2016-12-01'),\n",
       " (0.03, '2016-12-02'),\n",
       " (0.3, '2016-12-02'),\n",
       " (0.4, '2016-12-02'),\n",
       " (None, '2016-12-02'),\n",
       " (0.01, '2016-12-02'),\n",
       " (0.35, '2016-12-02'),\n",
       " (1.27, '2016-12-02'),\n",
       " (0.0, '2016-12-03'),\n",
       " (0.04, '2016-12-03'),\n",
       " (0.26, '2016-12-03'),\n",
       " (0.02, '2016-12-03'),\n",
       " (0.77, '2016-12-03'),\n",
       " (1.62, '2016-12-03'),\n",
       " (0.03, '2016-12-04'),\n",
       " (0.1, '2016-12-04'),\n",
       " (0.0, '2016-12-04'),\n",
       " (0.32, '2016-12-04'),\n",
       " (0.04, '2016-12-04'),\n",
       " (0.31, '2016-12-04'),\n",
       " (0.43, '2016-12-05'),\n",
       " (0.34, '2016-12-05'),\n",
       " (0.2, '2016-12-05'),\n",
       " (None, '2016-12-05'),\n",
       " (0.45, '2016-12-05'),\n",
       " (0.22, '2016-12-05'),\n",
       " (1.6, '2016-12-05'),\n",
       " (0.02, '2016-12-06'),\n",
       " (0.02, '2016-12-06'),\n",
       " (None, '2016-12-06'),\n",
       " (0.0, '2016-12-06'),\n",
       " (0.0, '2016-12-06'),\n",
       " (0.0, '2016-12-06'),\n",
       " (0.0, '2016-12-07'),\n",
       " (0.17, '2016-12-07'),\n",
       " (None, '2016-12-07'),\n",
       " (None, '2016-12-07'),\n",
       " (0.07, '2016-12-07'),\n",
       " (0.12, '2016-12-07'),\n",
       " (0.02, '2016-12-07'),\n",
       " (0.03, '2016-12-08'),\n",
       " (0.03, '2016-12-08'),\n",
       " (0.02, '2016-12-08'),\n",
       " (0.27, '2016-12-08'),\n",
       " (0.01, '2016-12-08'),\n",
       " (0.07, '2016-12-08'),\n",
       " (0.03, '2016-12-08'),\n",
       " (0.52, '2016-12-09'),\n",
       " (0.34, '2016-12-09'),\n",
       " (0.26, '2016-12-09'),\n",
       " (None, '2016-12-09'),\n",
       " (0.31, '2016-12-09'),\n",
       " (0.42, '2016-12-09'),\n",
       " (0.05, '2016-12-10'),\n",
       " (0.02, '2016-12-10'),\n",
       " (0.0, '2016-12-10'),\n",
       " (None, '2016-12-10'),\n",
       " (0.02, '2016-12-10'),\n",
       " (0.04, '2016-12-10'),\n",
       " (0.04, '2016-12-11'),\n",
       " (0.02, '2016-12-11'),\n",
       " (0.06, '2016-12-11'),\n",
       " (0.0, '2016-12-11'),\n",
       " (0.13, '2016-12-11'),\n",
       " (0.01, '2016-12-12'),\n",
       " (0.01, '2016-12-12'),\n",
       " (None, '2016-12-12'),\n",
       " (0.02, '2016-12-12'),\n",
       " (0.0, '2016-12-12'),\n",
       " (0.0, '2016-12-12'),\n",
       " (0.01, '2016-12-12'),\n",
       " (0.05, '2016-12-13'),\n",
       " (0.1, '2016-12-13'),\n",
       " (0.34, '2016-12-13'),\n",
       " (None, '2016-12-13'),\n",
       " (0.15, '2016-12-13'),\n",
       " (0.04, '2016-12-13'),\n",
       " (0.09, '2016-12-13'),\n",
       " (0.03, '2016-12-14'),\n",
       " (0.05, '2016-12-14'),\n",
       " (0.12, '2016-12-14'),\n",
       " (None, '2016-12-14'),\n",
       " (0.05, '2016-12-14'),\n",
       " (0.92, '2016-12-14'),\n",
       " (0.33, '2016-12-14'),\n",
       " (0.0, '2016-12-15'),\n",
       " (0.02, '2016-12-15'),\n",
       " (0.07, '2016-12-15'),\n",
       " (None, '2016-12-15'),\n",
       " (0.0, '2016-12-15'),\n",
       " (0.14, '2016-12-15'),\n",
       " (0.03, '2016-12-15'),\n",
       " (0.0, '2016-12-16'),\n",
       " (0.01, '2016-12-16'),\n",
       " (0.0, '2016-12-16'),\n",
       " (None, '2016-12-16'),\n",
       " (0.0, '2016-12-16'),\n",
       " (0.03, '2016-12-16'),\n",
       " (0.0, '2016-12-16'),\n",
       " (0.01, '2016-12-17'),\n",
       " (0.11, '2016-12-17'),\n",
       " (0.0, '2016-12-17'),\n",
       " (0.16, '2016-12-17'),\n",
       " (0.07, '2016-12-17'),\n",
       " (0.13, '2016-12-18'),\n",
       " (0.29, '2016-12-18'),\n",
       " (0.04, '2016-12-18'),\n",
       " (0.27, '2016-12-18'),\n",
       " (0.16, '2016-12-18'),\n",
       " (None, '2016-12-18'),\n",
       " (0.01, '2016-12-19'),\n",
       " (0.21, '2016-12-19'),\n",
       " (0.0, '2016-12-19'),\n",
       " (None, '2016-12-19'),\n",
       " (0.02, '2016-12-19'),\n",
       " (0.03, '2016-12-19'),\n",
       " (0.15, '2016-12-19'),\n",
       " (0.0, '2016-12-20'),\n",
       " (0.02, '2016-12-20'),\n",
       " (0.0, '2016-12-20'),\n",
       " (None, '2016-12-20'),\n",
       " (0.01, '2016-12-20'),\n",
       " (0.0, '2016-12-20'),\n",
       " (0.0, '2016-12-20'),\n",
       " (0.0, '2016-12-21'),\n",
       " (0.03, '2016-12-21'),\n",
       " (0.09, '2016-12-21'),\n",
       " (0.06, '2016-12-21'),\n",
       " (0.06, '2016-12-21'),\n",
       " (0.11, '2016-12-21'),\n",
       " (0.55, '2016-12-21'),\n",
       " (0.01, '2016-12-22'),\n",
       " (0.17, '2016-12-22'),\n",
       " (0.05, '2016-12-22'),\n",
       " (None, '2016-12-22'),\n",
       " (0.14, '2016-12-22'),\n",
       " (0.86, '2016-12-22'),\n",
       " (1.24, '2016-12-22'),\n",
       " (0.01, '2016-12-23'),\n",
       " (0.1, '2016-12-23'),\n",
       " (0.03, '2016-12-23'),\n",
       " (None, '2016-12-23'),\n",
       " (0.02, '2016-12-23'),\n",
       " (0.24, '2016-12-23'),\n",
       " (0.83, '2016-12-23'),\n",
       " (0.01, '2016-12-24'),\n",
       " (0.14, '2016-12-24'),\n",
       " (0.13, '2016-12-24'),\n",
       " (0.06, '2016-12-24'),\n",
       " (0.2, '2016-12-24'),\n",
       " (1.08, '2016-12-24'),\n",
       " (0.0, '2016-12-25'),\n",
       " (0.03, '2016-12-25'),\n",
       " (0.0, '2016-12-25'),\n",
       " (0.02, '2016-12-25'),\n",
       " (0.38, '2016-12-25'),\n",
       " (0.02, '2016-12-26'),\n",
       " (0.26, '2016-12-26'),\n",
       " (None, '2016-12-26'),\n",
       " (0.06, '2016-12-26'),\n",
       " (0.22, '2016-12-26'),\n",
       " (1.48, '2016-12-26'),\n",
       " (0.0, '2016-12-27'),\n",
       " (0.03, '2016-12-27'),\n",
       " (0.02, '2016-12-27'),\n",
       " (0.0, '2016-12-27'),\n",
       " (0.05, '2016-12-27'),\n",
       " (0.14, '2016-12-27'),\n",
       " (0.02, '2016-12-28'),\n",
       " (0.09, '2016-12-28'),\n",
       " (0.01, '2016-12-28'),\n",
       " (None, '2016-12-28'),\n",
       " (0.06, '2016-12-28'),\n",
       " (0.09, '2016-12-28'),\n",
       " (0.14, '2016-12-28'),\n",
       " (0.04, '2016-12-29'),\n",
       " (0.18, '2016-12-29'),\n",
       " (0.56, '2016-12-29'),\n",
       " (None, '2016-12-29'),\n",
       " (0.05, '2016-12-29'),\n",
       " (0.52, '2016-12-29'),\n",
       " (1.03, '2016-12-29'),\n",
       " (0.12, '2016-12-30'),\n",
       " (0.21, '2016-12-30'),\n",
       " (0.29, '2016-12-30'),\n",
       " (None, '2016-12-30'),\n",
       " (0.07, '2016-12-30'),\n",
       " (0.29, '2016-12-30'),\n",
       " (2.37, '2016-12-30'),\n",
       " (0.01, '2016-12-31'),\n",
       " (0.62, '2016-12-31'),\n",
       " (0.36, '2016-12-31'),\n",
       " (0.25, '2016-12-31'),\n",
       " (0.9, '2016-12-31'),\n",
       " (0.0, '2017-01-01'),\n",
       " (0.29, '2017-01-01'),\n",
       " (0.0, '2017-01-01'),\n",
       " (None, '2017-01-01'),\n",
       " (0.03, '2017-01-01'),\n",
       " (0.03, '2017-01-01'),\n",
       " (0.0, '2017-01-02'),\n",
       " (0.0, '2017-01-02'),\n",
       " (0.01, '2017-01-02'),\n",
       " (0.01, '2017-01-02'),\n",
       " (0.0, '2017-01-02'),\n",
       " (0.0, '2017-01-03'),\n",
       " (0.0, '2017-01-03'),\n",
       " (0.0, '2017-01-03'),\n",
       " (None, '2017-01-03'),\n",
       " (0.0, '2017-01-03'),\n",
       " (0.0, '2017-01-03'),\n",
       " (0.0, '2017-01-04'),\n",
       " (0.0, '2017-01-04'),\n",
       " (0.0, '2017-01-04'),\n",
       " (0.18, '2017-01-04'),\n",
       " (0.0, '2017-01-04'),\n",
       " (0.0, '2017-01-04'),\n",
       " (0.0, '2017-01-05'),\n",
       " (0.0, '2017-01-05'),\n",
       " (0.0, '2017-01-05'),\n",
       " (0.42, '2017-01-05'),\n",
       " (0.06, '2017-01-05'),\n",
       " (0.47, '2017-01-05'),\n",
       " (0.0, '2017-01-06'),\n",
       " (0.0, '2017-01-06'),\n",
       " (0.59, '2017-01-06'),\n",
       " (0.01, '2017-01-06'),\n",
       " (0.1, '2017-01-06'),\n",
       " (0.1, '2017-01-06'),\n",
       " (0.0, '2017-01-07'),\n",
       " (0.06, '2017-01-07'),\n",
       " (0.0, '2017-01-07'),\n",
       " (0.0, '2017-01-07'),\n",
       " (0.0, '2017-01-07'),\n",
       " (0.0, '2017-01-07'),\n",
       " (0.0, '2017-01-08'),\n",
       " (0.0, '2017-01-08'),\n",
       " (0.03, '2017-01-08'),\n",
       " (0.0, '2017-01-08'),\n",
       " (0.0, '2017-01-08'),\n",
       " (0.03, '2017-01-08'),\n",
       " (0.0, '2017-01-09'),\n",
       " (0.0, '2017-01-09'),\n",
       " (0.0, '2017-01-09'),\n",
       " (None, '2017-01-09'),\n",
       " (0.0, '2017-01-09'),\n",
       " (0.0, '2017-01-09'),\n",
       " (0.0, '2017-01-09'),\n",
       " (0.0, '2017-01-10'),\n",
       " (0.0, '2017-01-10'),\n",
       " (0.0, '2017-01-10'),\n",
       " (None, '2017-01-10'),\n",
       " (0.0, '2017-01-10'),\n",
       " (0.0, '2017-01-10'),\n",
       " (0.0, '2017-01-10'),\n",
       " (0.0, '2017-01-11'),\n",
       " (0.0, '2017-01-11'),\n",
       " (0.0, '2017-01-11'),\n",
       " (None, '2017-01-11'),\n",
       " (0.0, '2017-01-11'),\n",
       " (0.0, '2017-01-11'),\n",
       " (0.0, '2017-01-12'),\n",
       " (0.0, '2017-01-12'),\n",
       " (None, '2017-01-12'),\n",
       " (None, '2017-01-12'),\n",
       " (0.0, '2017-01-12'),\n",
       " (0.0, '2017-01-12'),\n",
       " (0.0, '2017-01-13'),\n",
       " (0.0, '2017-01-13'),\n",
       " (None, '2017-01-13'),\n",
       " (None, '2017-01-13'),\n",
       " (0.0, '2017-01-13'),\n",
       " (0.0, '2017-01-13'),\n",
       " (0.0, '2017-01-14'),\n",
       " (0.0, '2017-01-14'),\n",
       " (0.0, '2017-01-14'),\n",
       " (0.01, '2017-01-14'),\n",
       " (0.0, '2017-01-14'),\n",
       " (0.0, '2017-01-15'),\n",
       " (0.0, '2017-01-15'),\n",
       " (None, '2017-01-15'),\n",
       " (0.0, '2017-01-15'),\n",
       " (0.01, '2017-01-15'),\n",
       " (0.0, '2017-01-16'),\n",
       " (0.0, '2017-01-16'),\n",
       " (None, '2017-01-16'),\n",
       " (0.0, '2017-01-16'),\n",
       " (0.0, '2017-01-16'),\n",
       " (0.0, '2017-01-16'),\n",
       " (0.0, '2017-01-17'),\n",
       " (0.0, '2017-01-17'),\n",
       " (0.0, '2017-01-17'),\n",
       " (0.0, '2017-01-17'),\n",
       " (0.0, '2017-01-17'),\n",
       " (0.0, '2017-01-17'),\n",
       " (0.0, '2017-01-18'),\n",
       " (0.0, '2017-01-18'),\n",
       " (0.0, '2017-01-18'),\n",
       " (0.0, '2017-01-18'),\n",
       " (None, '2017-01-18'),\n",
       " (0.0, '2017-01-18'),\n",
       " (0.07, '2017-01-18'),\n",
       " (0.0, '2017-01-19'),\n",
       " (0.0, '2017-01-19'),\n",
       " (0.0, '2017-01-19'),\n",
       " (None, '2017-01-19'),\n",
       " (0.0, '2017-01-19'),\n",
       " (0.02, '2017-01-19'),\n",
       " (0.0, '2017-01-19'),\n",
       " (0.0, '2017-01-20'),\n",
       " (0.0, '2017-01-20'),\n",
       " (0.0, '2017-01-20'),\n",
       " (None, '2017-01-20'),\n",
       " (0.0, '2017-01-20'),\n",
       " (0.0, '2017-01-20'),\n",
       " (0.0, '2017-01-20'),\n",
       " (0.0, '2017-01-21'),\n",
       " (0.04, '2017-01-21'),\n",
       " (0.02, '2017-01-21'),\n",
       " (0.11, '2017-01-21'),\n",
       " (0.03, '2017-01-21'),\n",
       " (0.08, '2017-01-21'),\n",
       " (0.16, '2017-01-22'),\n",
       " (0.01, '2017-01-22'),\n",
       " (0.04, '2017-01-22'),\n",
       " (0.09, '2017-01-22'),\n",
       " (0.72, '2017-01-22'),\n",
       " (0.0, '2017-01-23'),\n",
       " (0.08, '2017-01-23'),\n",
       " (None, '2017-01-23'),\n",
       " (None, '2017-01-23'),\n",
       " (0.0, '2017-01-23'),\n",
       " (0.01, '2017-01-23'),\n",
       " (0.85, '2017-01-23'),\n",
       " (0.04, '2017-01-24'),\n",
       " (0.15, '2017-01-24'),\n",
       " (None, '2017-01-24'),\n",
       " (0.08, '2017-01-24'),\n",
       " (0.13, '2017-01-24'),\n",
       " (1.85, '2017-01-24'),\n",
       " (0.03, '2017-01-25'),\n",
       " (0.12, '2017-01-25'),\n",
       " (None, '2017-01-25'),\n",
       " (None, '2017-01-25'),\n",
       " (0.0, '2017-01-25'),\n",
       " (0.79, '2017-01-25'),\n",
       " (2.64, '2017-01-25'),\n",
       " (0.0, '2017-01-26'),\n",
       " (0.0, '2017-01-26'),\n",
       " (0.01, '2017-01-26'),\n",
       " (0.0, '2017-01-26'),\n",
       " (0.0, '2017-01-26'),\n",
       " (0.0, '2017-01-26'),\n",
       " (0.1, '2017-01-26'),\n",
       " (0.0, '2017-01-27'),\n",
       " (0.0, '2017-01-27'),\n",
       " (0.0, '2017-01-27'),\n",
       " (0.0, '2017-01-27'),\n",
       " (0.0, '2017-01-27'),\n",
       " (0.03, '2017-01-27'),\n",
       " (0.03, '2017-01-27'),\n",
       " ...]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Design a query to retrieve the last 12 months of precipitation data and plot the results\n",
    "prep_data=session.query(Measurement.prcp, Measurement.date).\\\n",
    "    filter(Measurement.date >= '2016-08-23').\\\n",
    "    order_by(Measurement.date).all() \n",
    "prep_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "query date 2016-08-23\n"
     ]
    }
   ],
   "source": [
    "# Calculate the date 1 year ago from the last data point in the database\n",
    "query_date=dt.date(2017,8,23)-dt.timedelta(days=365)\n",
    "print(\"query date\",query_date)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(54.0, 85.0, 71.66378066378067)]"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Perform a query to retrieve the data and precipitation scores\n",
    "session.query(func.min(Measurement.tobs), func.max(Measurement.tobs), func.avg(Measurement.tobs)).\\\n",
    "   filter(Measurement.station == 'USC00519281').all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prcp</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>1.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-23</th>\n",
       "      <td>0.70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>2.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>2.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>1.22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>2.15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-24</th>\n",
       "      <td>1.45</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2016-08-25</th>\n",
       "      <td>0.08</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            prcp\n",
       "date            \n",
       "2016-08-23  0.00\n",
       "2016-08-23  0.15\n",
       "2016-08-23  0.05\n",
       "2016-08-23   NaN\n",
       "2016-08-23  0.02\n",
       "2016-08-23  1.79\n",
       "2016-08-23  0.70\n",
       "2016-08-24  0.08\n",
       "2016-08-24  2.15\n",
       "2016-08-24  2.28\n",
       "2016-08-24   NaN\n",
       "2016-08-24  1.22\n",
       "2016-08-24  2.15\n",
       "2016-08-24  1.45\n",
       "2016-08-25  0.08"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Save the query results as a Pandas DataFrame and set the index to the date column\n",
    "prcp_df = pd.DataFrame(prep_data,columns=['prcp', 'date'])\n",
    "prcp_df.set_index('date',inplace=True,)\n",
    "prcp_df.head(15)                                       \n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Use Pandas Plotting with Matplotlib to plot the data\n",
    "prcp_df.plot(title=\"Precipitation (12 months)\")\n",
    "plt.legend(loc='upper center')\n",
    "plt.xticks([])\n",
    "\n",
    "plt.show()\n",
    "\n",
    "plt.savefig(\"../Precipitation.png\")\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![precipitation](Images/precipitation.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>prcp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2021.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.177279</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.461190</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.020000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>0.130000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>6.700000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              prcp\n",
       "count  2021.000000\n",
       "mean      0.177279\n",
       "std       0.461190\n",
       "min       0.000000\n",
       "25%       0.000000\n",
       "50%       0.020000\n",
       "75%       0.130000\n",
       "max       6.700000"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use Pandas to calcualte the summary statistics for the precipitation data\n",
    "prcp_df.describe()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![describe](Images/describe.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stations Available: 9 \n"
     ]
    }
   ],
   "source": [
    "# Design a query to show how many stations are available in this dataset?\n",
    "available_stations = session.query(Measurement.station).distinct().count()\n",
    "print(f\"Stations Available: {available_stations} \")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Most Active Stations\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "[('USC00519281', 2772),\n",
       " ('USC00519397', 2724),\n",
       " ('USC00513117', 2709),\n",
       " ('USC00519523', 2669),\n",
       " ('USC00516128', 2612),\n",
       " ('USC00514830', 2202),\n",
       " ('USC00511918', 1979),\n",
       " ('USC00517948', 1372),\n",
       " ('USC00518838', 511)]"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# What are the most active stations? (i.e. what stations have the most rows)?\n",
    "# List the stations and the counts in descending order.\n",
    "prep_df = session.query(Measurement.station, \n",
    "                                func.count(Measurement.station)).group_by(Measurement.station).order_by(func.count(Measurement.station).desc()).all()\n",
    "print(f\"Most Active Stations\")\n",
    "prep_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(54.0, 71.66378066378067, 85.0)]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using the station id from the previous query, calculate the lowest temperature recorded, \n",
    "# highest temperature recorded, and average temperature most active station?\n",
    "prev_year = prep_df[0][0]\n",
    "session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "                filter(Measurement.station == prev_year).all()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(54.0, 85.0, 71.66378066378067)]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Choose the station with the highest number of temperature observations.\n",
    "session.query(func.min(Measurement.tobs), func.max(Measurement.tobs), func.avg(Measurement.tobs)).\\\n",
    "   filter(Measurement.station == 'USC00519281').all()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Query the last 12 months of temperature observation data for this station and plot the results as a histogram\n",
    "import datetime as dt\n",
    "from pandas.plotting import table\n",
    "prev_year = dt.date(2017, 8, 23) - dt.timedelta(days=365)\n",
    "results = session.query(Measurement.tobs).\\\n",
    "   filter(Measurement.station == 'USC00519281').\\\n",
    "   filter(Measurement.date >= prev_year).all()\n",
    "df = pd.DataFrame(results, columns=['tobs'])\n",
    "df.plot.hist(bins=12)\n",
    "plt.tight_layout()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "![precipitation](Images/station-histogram.png)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(62.0, 69.57142857142857, 74.0)]\n"
     ]
    }
   ],
   "source": [
    "# This function called `calc_temps` will accept start date and end date in the format '%Y-%m-%d' \n",
    "# and return the minimum, average, and maximum temperatures for that range of dates\n",
    "def temps(start_date, end_date):\n",
    "    \"\"\"TMIN, TAVG, and TMAX for a list of dates.\n",
    "    \n",
    "    Args:\n",
    "        start_date (string): A date string in the format %Y-%m-%d\n",
    "        end_date (string): A date string in the format %Y-%m-%d\n",
    "        \n",
    "    Returns:\n",
    "        TMIN, TAVE, and TMAX\n",
    "    \"\"\"\n",
    "    \n",
    "    return session.query(func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)).\\\n",
    "        filter(Measurement.date >= start_date).filter(Measurement.date <= end_date).all()\n",
    "\n",
    "# function usage example\n",
    "print(temps('2012-02-28', '2012-03-05'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(69.0, 78.11627906976744, 87.0)]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Use your previous function `calc_temps` to calculate the tmin, tavg, and tmax\n",
    "# for your trip using the previous year's data for those same dates.\n",
    "trip = temps('2017-07-01','2017-07-14')\n",
    "trip\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the results from your previous query as a bar chart. \n",
    "# Use \"Trip Avg Temp\" as your Title\n",
    "# Use the average temperature for the y value\n",
    "# Use the peak-to-peak (tmax-tmin) value as the y error bar (yerr)\n",
    "trip_df = pd.DataFrame(trip, columns=['Min Temp', 'Avg Temp', 'Max Temp'])\n",
    "avg_temp = trip_df['Avg Temp']\n",
    "min_max_temp = trip_df.iloc[0]['Max Temp'] - trip_df.iloc[0]['Min Temp']\n",
    "avg_temp.plot(kind='bar', yerr=min_max_temp, figsize=(6,8), alpha=0.5, color='coral')\n",
    "plt.title(\"Trip Avg Temp\", fontsize=20)\n",
    "plt.ylabel(\"Temp (F)\")\n",
    "plt.xticks([])\n",
    "plt.grid()\n",
    "plt.savefig(\"Images/station-histogram.png\")\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[('USC00516128', 'MANOA LYON ARBO 785.2, HI US', 21.3331, -157.8025, 152.4, 0.1), ('USC00519281', 'WAIHEE 837.5, HI US', 21.45167, -157.84888999999998, 32.9, 0.08), ('USC00513117', 'KANEOHE 838.1, HI US', 21.4234, -157.8015, 14.6, 0.06), ('USC00519397', 'WAIKIKI 717.2, HI US', 21.2716, -157.8168, 3.0, 0.02), ('USC00514830', 'KUALOA RANCH HEADQUARTERS 886.9, HI US', 21.5213, -157.8374, 7.0, None), ('USC00517948', 'PEARL CITY, HI US', 21.3934, -157.9751, 11.9, None), ('USC00519523', 'WAIMANALO EXPERIMENTAL FARM, HI US', 21.33556, -157.71139, 19.5, None)]\n"
     ]
    }
   ],
   "source": [
    "# Calculate the total amount of rainfall per weather station for your trip dates using the previous year's matching dates.\n",
    "# Sort this in descending order by precipitation amount and list the station, name, latitude, longitude, and elevation\n",
    "def precipitation(start_date, end_date):\n",
    "    \n",
    "        # Docstring for the function `calc_temps`\n",
    "    \"\"\"Precipitation information per weather station\n",
    "    \n",
    "    Args:\n",
    "        start_date (string): A date string in the format %Y-%m-%d\n",
    "        end_date (string): A date string in the format %Y-%m-%d\n",
    "        \n",
    "    Returns:\n",
    "        A list of tuples containing precipitation amount, station, name, latitude, longitude, and elevation in descending order.\n",
    "    \"\"\"\n",
    "    \n",
    "    sel = [Measurement.station, \n",
    "           Station.name, \n",
    "           Station.latitude, \n",
    "           Station.longitude, \n",
    "           Station.elevation, \n",
    "           Measurement.prcp]\n",
    "    \n",
    "    return session.query(*sel).\\\n",
    "            filter(Measurement.station == Station.station).filter(Measurement.date >= start_date).filter(Measurement.date <= end_date).group_by(Measurement.station).order_by(Measurement.prcp.desc()).all()\n",
    "\n",
    "print(precipitation('2017-07-01','2017-07-14'))\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optional Challenge Assignment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[(62.0, 69.15384615384616, 77.0)]"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a query that will calculate the daily normals \n",
    "# (i.e. the averages for tmin, tmax, and tavg for all historic data matching a specific month and day)\n",
    "\n",
    "def daily_normals(date):\n",
    "    \"\"\"Daily Normals.\n",
    "    \n",
    "    Args:\n",
    "        date (str): A date string in the format '%m-%d'\n",
    "        \n",
    "    Returns:\n",
    "        A list of tuples containing the daily normals, tmin, tavg, and tmax\n",
    "    \n",
    "    \"\"\"\n",
    "    \n",
    "    sel = [func.min(Measurement.tobs), func.avg(Measurement.tobs), func.max(Measurement.tobs)]\n",
    "    return session.query(*sel).filter(func.strftime(\"%m-%d\", Measurement.date) == date).all()\n",
    "    \n",
    "daily_normals(\"01-01\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# calculate the daily normals for your trip\n",
    "# push each tuple of calculations into a list called `normals`\n",
    "\n",
    "# Set the start and end date of the trip\n",
    "\n",
    "# Use the start and end date to create a range of dates\n",
    "\n",
    "# Stip off the year and save a list of %m-%d strings\n",
    "\n",
    "# Loop through the list of %m-%d strings and calculate the normals for each date\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load the previous query results into a Pandas DataFrame and add the `trip_dates` range as the `date` index\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Plot the daily normals as an area plot with `stacked=False`\n"
   ]
  }
 ],
 "metadata": {
  "kernel_info": {
   "name": "python3"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "nteract": {
   "version": "0.12.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
